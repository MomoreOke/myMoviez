// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using myMoviez.Data;

#nullable disable

namespace myMoviez.Migrations
{
    [DbContext(typeof(MyMoviezDBContext))]
    partial class MyMoviezDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("myMoviez.Models.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActorId"), 1L, 1);

                    b.Property<string>("ActorName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ActorId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ActorId"), false);

                    b.ToTable("Actor", (string)null);
                });

            modelBuilder.Entity("myMoviez.Models.Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectorId"), 1L, 1);

                    b.Property<string>("DirectorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DirectorId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DirectorId"), false);

                    b.ToTable("Director", (string)null);
                });

            modelBuilder.Entity("myMoviez.Models.Distributor", b =>
                {
                    b.Property<int>("DistributorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistributorId"), 1L, 1);

                    b.Property<string>("DistributerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DistributorId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DistributorId"), false);

                    b.ToTable("Distributor", (string)null);
                });

            modelBuilder.Entity("myMoviez.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("GenreId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("GenreId"), false);

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("myMoviez.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"), 1L, 1);

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<int?>("DistributorId")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("char(400)")
                        .IsFixedLength();

                    b.Property<string>("Plot")
                        .HasMaxLength(1500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1500)");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("datetime2")
                        .IsFixedLength();

                    b.Property<int?>("RnRid")
                        .HasColumnType("int")
                        .HasColumnName("RnRId");

                    b.HasKey("MovieId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("MovieId"), false);

                    b.HasIndex("ActorId");

                    b.HasIndex("DirectorId");

                    b.HasIndex("DistributorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("ProducerId");

                    b.HasIndex("RnRid");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("myMoviez.Models.Producer", b =>
                {
                    b.Property<int>("ProducerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProducerId"), 1L, 1);

                    b.Property<string>("ProducerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ProducerId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ProducerId"), false);

                    b.ToTable("Producer", (string)null);
                });

            modelBuilder.Entity("myMoviez.Models.RatingAndReview", b =>
                {
                    b.Property<int>("RnRid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RnRId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RnRid"), 1L, 1);

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("RnRid");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("RnRid"), false);

                    b.ToTable("RatingAndReview", (string)null);
                });

            modelBuilder.Entity("myMoviez.Models.Movie", b =>
                {
                    b.HasOne("myMoviez.Models.Actor", "Actor")
                        .WithMany("Movies")
                        .HasForeignKey("ActorId")
                        .IsRequired()
                        .HasConstraintName("FK_Actor_Movie");

                    b.HasOne("myMoviez.Models.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .IsRequired()
                        .HasConstraintName("FK_Director_Movie");

                    b.HasOne("myMoviez.Models.Distributor", "Distributor")
                        .WithMany("Movies")
                        .HasForeignKey("DistributorId")
                        .HasConstraintName("FK_Distributor_Movie");

                    b.HasOne("myMoviez.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_Genre_Movie");

                    b.HasOne("myMoviez.Models.Producer", "Producer")
                        .WithMany("Movies")
                        .HasForeignKey("ProducerId")
                        .IsRequired()
                        .HasConstraintName("FK_Producer_Movie");

                    b.HasOne("myMoviez.Models.RatingAndReview", "RnR")
                        .WithMany("Movies")
                        .HasForeignKey("RnRid")
                        .HasConstraintName("FK_RatingAndReview_Movie");

                    b.Navigation("Actor");

                    b.Navigation("Director");

                    b.Navigation("Distributor");

                    b.Navigation("Genre");

                    b.Navigation("Producer");

                    b.Navigation("RnR");
                });

            modelBuilder.Entity("myMoviez.Models.Actor", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("myMoviez.Models.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("myMoviez.Models.Distributor", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("myMoviez.Models.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("myMoviez.Models.Producer", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("myMoviez.Models.RatingAndReview", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
